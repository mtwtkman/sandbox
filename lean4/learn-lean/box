#!/bin/sh

function show_box_script_usage
{
  echo ""
  echo "box is a thin wrapper to manipulate distrobox handy."
  echo ""
  echo "USAGE:"
  echo -e "\t./box [COMMAND] [OPTION]"
  echo ""
  echo "COMMANDS:"
  echo -e "\tenter | e [-r]"
  echo -e "\t\tEnter your development container via distrobox. If the continer have not existed,  will create it."
  echo -e "\t\tYou can pass -r option to recreate the container then /home/mtwtkman/work/learn-lean/.distrobox/home will be recreated also."
  echo ""
  echo -e "\tinit | i [-f]"
  echo -e "\t\tInitialize your development container. You should run command in your development container at first."
  echo -e "\t\tThis command will deploy .bashrc and some configs(Current targets are nvim, bat and git)"
  echo -e "\\t\tYou can pass -f option to force initialize again."
  echo ""
  echo -e "\tstop | s"
  echo -e "\t\tStop the development container."
}

[ $# = 0 ] && show_box_script_usage && exit 0

cmd="$1"

shift

function create_box
{
  [ "${CONTAINER_ID}" ] && return
  /bin/rm -rf /home/mtwtkman/work/learn-lean/.distrobox/home
  [ "$(distrobox list | rg learn-lean-dev)" ] && distrobox assemble rm --file /home/mtwtkman/work/learn-lean/distrobox.ini
  [ ! "$(distrobox list | rg learn-lean-dev)" ] && distrobox assemble create --file /home/mtwtkman/work/learn-lean/distrobox.ini
}

function create_symlink
{
  [ -L "${2}" ] && return

  [ ! -e "${1}" ] && echo "Cannot find source path. So do nothing. (${1})" && return
  ln -s "${1}" "${2}"
}

function generate_bashrc
{
  cat <<EOF > ~/.bashrc
#!/bin/sh

export BOX_INITIALIZED=1

alias l="ls -CF"
alias la="ls -A"
alias ll="ls -alF"
alias vim="nvim"

source /usr/share/bash-completion//bash_completion
source /usr/share/bash-completion/completions/git
source /usr/share/git/completion/git-completion.bash
source /usr/share/git/completion/git-prompt.sh

export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g \"!{.git,node_modules}/*\" 2> /dev/null"
export FZF_DEFAULT_OPTS="""
--reverse
--extended
--multi
--inline-info
--prompt='fzf>'
--ansi
--preview='bat --style=full --color=always {}'
--bind=ctrl-f:page-down,ctrl-b:page-up,'ctrl-v:become(vim {})',ctrl-^:first,ctrl-/:last
--color=bg+:#313244,spinner:#f5e0dc,hl:#f38ba8
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8
"""
export FZF_CTRL_T_COMMAND="\rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null"

eval "\$(fzf --bash)"

export GIT_PS1_SHOWCOLORHINTS=true
ps1_git='\$(__git_ps1 " (%s)")'
ps1_distrobox="î¶• : \e[33m${CONTAINER_ID}\e[0m"
export PS1="\w\${ps1_git} - \${ps1_distrobox}\n$ "
EOF
}

function initialize_box
{
  [ "$#" = 1 ] && [ "$1" = "-f" ] && unset BOX_INITIALIZED
  [ "${BOX_INITIALIZED}" ] && echo "Already initialized bye." && exit 0
  [ ! -d "${XDG_CONFIG_HOME}" ] && mkdir "${XDG_CONFIG_HOME}"

  create_symlink ${DISTROBOX_HOST_HOME}/.ssh "${HOME}/.ssh"
  create_symlink ${DISTROBOX_HOST_HOME}/.config/nvim "${XDG_CONFIG_HOME}/nvim"
  create_symlink ${DISTROBOX_HOST_HOME}/.config/git "${XDG_CONFIG_HOME}/git"
  create_symlink ${DISTROBOX_HOST_HOME}/.config/bat "${XDG_CONFIG_HOME}/bat"

  generate_bashrc

  echo "generated ~/.bashrc"
}

case "${cmd}" in
  enter|e)
    [ "${CONTAINER_ID}" ] && exit 0
    [ ! "$(distrobox list | rg learn-lean-dev)" ] && create_box
    [ "$#" = 1 ] && [ "$1" = "-r" ] && create_box
    distrobox enter "learn-lean-dev"
    ;;
  init|i)
    [ ! "${CONTAINER_ID}" ] && exit 0
    initialize_box $@
    ;;
  bashrc|b) generate_bashrc;;
  replace|r) distrobox assemble create --replace --file /home/mtwtkman/work/learn-lean/distrobox.ini;;
  stop|s)
    [ "${CONTAINER_ID}" ] && exit 0
    [ ! "$(distrobox list | rg learn-lean-dev)" ] && exit 0
    distrobox stop learn-lean-dev
    ;;
  *) show_box_script_usage;;
esac
